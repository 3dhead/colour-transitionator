{"version":3,"sources":["TransitionBlock.js","Colors.js","ColorPicker.js","index.js"],"names":["TransitionBlock","props","color","closestColor","red","parseInt","substring","green","blue","redDiff","greenDiff","blueDiff","closest","paints","forEach","paint","rdiff","Math","abs","rCloser","gdiff","gCloser","bdiff","getPaintSimilar","react_default","a","createElement","className","style","background","name","Colors","startColor","endColor","_useState","useState","_useState2","Object","slicedToArray","number","setNumber","_useState3","_useState4","startRgb","setStartRgb","_useState5","_useState6","endRgb","setEndRgb","_useState7","_useState8","display","setDisplay","_useState9","_useState10","transition","setTransition","useEffect","start","slice","end","convertHexToRgb","length","checkNumber","type","value","min","max","onChange","e","target","onClick","numberOfSteps","rangeR","rangeG","rangeB","steps","incrementR","floor","incrementG","incrementB","i","push","transitionArray","map","toString","concat","convertRbgToHex","key","ColorButton","handleChange","selectedColor","ColorPicker_ColorToolTip","title","ColorToolTip","children","ColorPicker","ColorPicker_ColorButton","rootElement","document","getElementById","ReactDOM","render","setStartColor","setEndColor"],"mappings":"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","file":"static/js/main.1eaaf6ef.chunk.js","sourcesContent":["import React from \"react\";\nimport paints from \"./paints.json\";\n\nexport default function TransitionBlock(props) {\n  const { color } = props;\n\n  const getPaintSimilar = () => {\n    const red = parseInt(color.substring(1, 3), 16);\n    const green = parseInt(color.substring(3, 5), 16);\n    const blue = parseInt(color.substring(5, 7), 16);\n\n    let redDiff = 1000;\n    let greenDiff = 1000;\n    let blueDiff = 1000;\n    let closest = {};\n\n    paints.forEach(paint => {\n      const rdiff = Math.abs(red - paint.red);\n      const rCloser = rdiff < redDiff || rdiff === 0;\n\n      const gdiff = Math.abs(green - paint.green);\n      const gCloser = gdiff < greenDiff || gdiff === 0;\n      const bdiff = Math.abs(blue - paint.blue);\n      const bCloser = bdiff < blueDiff || bdiff === 0;\n\n      if (rCloser && gCloser && bCloser) {\n        redDiff = rdiff;\n        greenDiff = gdiff;\n        blueDiff = bdiff;\n        closest = paint;\n      }\n    });\n\n    return closest;\n  };\n\n  const closestColor = getPaintSimilar();\n\n  return (\n    <div className=\"transition-block\" style={{ background: color }}>\n      {closestColor.color && (\n        <div className=\"transition-name\">\n          <span>{closestColor.name}</span>\n          <div\n            className=\"close-color\"\n            style={{ background: closestColor.color }}\n          />\n        </div>\n      )}\n    </div>\n  );\n}\n","import React, { useState, useEffect } from \"react\";\nimport TransitionBlock from \"./TransitionBlock\";\n\nexport default function Colors(props) {\n  const { startColor, endColor } = props;\n  const [number, setNumber] = useState(2);\n  const [startRgb, setStartRgb] = useState([]);\n  const [endRgb, setEndRgb] = useState([]);\n  const [display, setDisplay] = useState(false);\n  const [transition, setTransition] = useState([]);\n\n  useEffect(() => {\n    let start = startColor.slice(1, 7);\n    let end = endColor.slice(1, 7);\n    setStartRgb(convertHexToRgb(start));\n    setEndRgb(convertHexToRgb(end));\n  }, [startColor, endColor]);\n  const convertHexToRgb = color => {\n    if (color.length === 6) {\n      let red = parseInt(color.substring(0, 2), 16);\n      let green = parseInt(color.substring(2, 4), 16);\n      let blue = parseInt(color.substring(4, 6), 16);\n      let rgb = [red, green, blue];\n      return rgb;\n    }\n  };\n  const convertRbgToHex = color => {\n    let red = color[0].toString(16);\n    let blue = color[1].toString(16);\n    let green = color[2].toString(16);\n    let rgb = \"#\".concat(red, blue, green);\n    return rgb;\n  };\n  const checkNumber = number => {\n    if (number > 255) {\n      return 255;\n    }\n    if (number < 0) {\n      return 0;\n    }\n    return number;\n  };\n  const getColorRange = () => {\n    const numberOfSteps = parseInt(number, 10);\n    const rangeR = startRgb[0] - endRgb[0];\n    const rangeG = startRgb[1] - endRgb[1];\n    const rangeB = startRgb[2] - endRgb[2];\n    const steps = numberOfSteps + 1;\n    const incrementR = -Math.floor(rangeR / steps);\n    const incrementG = -Math.floor(rangeG / steps);\n    const incrementB = -Math.floor(rangeB / steps);\n    let transition = [];\n    for (let i = 0; i < numberOfSteps; i++) {\n      if (i === 0) {\n        transition.push([\n          checkNumber(startRgb[0] + incrementR),\n          checkNumber(startRgb[1] + incrementG),\n          checkNumber(startRgb[2] + incrementB)\n        ]);\n      } else {\n        transition.push([\n          checkNumber(transition[i - 1][0] + incrementR),\n          checkNumber(transition[i - 1][1] + incrementG),\n          checkNumber(transition[i - 1][2] + incrementB)\n        ]);\n      }\n    }\n    let transitionArray = transition.map(color => convertRbgToHex(color));\n    setTransition(transitionArray);\n    setDisplay(true);\n  };\n\n  return (\n    <div className=\"colors\">\n      <div className=\"input-wrapper\">\n        <input\n          type=\"number\"\n          value={number}\n          className=\"steps-input\"\n          min=\"1\"\n          max=\"10\"\n          onChange={e => setNumber(e.target.value)}\n        />\n        <button className=\"run-button\" onClick={getColorRange}>\n          Blend!\n        </button>\n      </div>\n      <div className=\"transition\">\n        <TransitionBlock color={startColor} />\n        {display &&\n          transition.map(color => (\n            <TransitionBlock color={color} key={color} />\n          ))}\n        <TransitionBlock color={endColor} />\n      </div>\n    </div>\n  );\n}\n","import React from \"react\";\nimport paints from \"./paints.json\";\n\nconst ColorButton = props => {\n  const { color, handleChange, selectedColor } = props;\n  return (\n    <ColorToolTip color={color}>\n      <button\n        className={`color-button ${\n          color.color === selectedColor ? \"current\" : \"\"\n        }`}\n        style={{ background: color.color }}\n        title={color.name}\n        onClick={() => handleChange(color.color)}\n      />\n    </ColorToolTip>\n  );\n};\nconst ColorToolTip = props => {\n  const { children, color } = props;\n  return (\n    <div className=\"tooltip-anchor\">\n      <div className=\"tooltip\">\n        <div className=\"tooltip-color\" style={{ background: color.color }} />\n        <span>{color.name}</span>\n      </div>\n      {children}\n    </div>\n  );\n};\nexport default function ColorPicker(props) {\n  const { selectedColor, handleChange } = props;\n  return (\n    <div className=\"color-picker\" style={{ background: selectedColor }}>\n      <div className=\"color-block\">\n        {paints.map(color => (\n          <ColorButton\n            selectedColor={selectedColor}\n            color={color}\n            handleChange={handleChange}\n            key={color.name}\n          />\n        ))}\n      </div>\n    </div>\n  );\n}\n","import React, { useState } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport Colors from \"./Colors\";\nimport ColorPicker from \"./ColorPicker\";\nimport \"./styles.scss\";\n\nfunction App() {\n  const [startColor, setStartColor] = useState(\"transparent\");\n  const [endColor, setEndColor] = useState(\"transparent\");\n\n  return (\n    <div className=\"App\">\n      <h1> Citadel Colour Transitionator</h1>\n      <h2>by airymario</h2>\n      <p>\n        Find out how your paint will blend between the two selections you make.\n      </p>\n      <p>\n        Hover over the transition blocks to find the color that best matches the\n        transition tone!\n      </p>\n\n      <Colors startColor={startColor} endColor={endColor} />\n      <div className=\"picker-wrapper\">\n        <ColorPicker selectedColor={startColor} handleChange={setStartColor} />\n        <ColorPicker selectedColor={endColor} handleChange={setEndColor} />\n      </div>\n    </div>\n  );\n}\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(<App />, rootElement);\n"],"sourceRoot":""}